package com.newtours.tests;

import allure.AllureListener;
import com.newtours.pages.*;
import io.qameta.allure.*;
import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Listeners;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
import test.BaseTest;

@Listeners({AllureListener.class})
public class BookFlightTest extends BaseTest {

    private String noOfPassengers;
    private String expectedPrice;

    @BeforeTest
    @Parameters({"noOfPassengers", "expectedPrice"})
    public void setupParameters(String noOfPassengers, String expectedPrice) {
        this.noOfPassengers = noOfPassengers;
        this.expectedPrice = expectedPrice;
    }

    @Test(description = "Make registration done")
    @Description("Make registration done - generated by Allure")
    @Epic("EP001")
    @Feature("Feature1: Registration")
    @Story("Story: Registration Presence")
    @Step("Verify Registration is done")
    @Severity(SeverityLevel.BLOCKER)
    public void registrationPage() {
        RegistrationPage registrationPage = new RegistrationPage(driver);
        registrationPage.goTo();
        registrationPage.enterUserDetails("selenium", "docker");
        registrationPage.enterUserCredentials("selenium", "docker");
        registrationPage.submit();
    }

    @Description("Registration Confirmation")
    @Epic("EP001")
    @Feature("Feature2: Registration Confirmation")
    @Story("Story: Registration Confirmation Presence")
    @Step("Verify Registration Confirmation is done")
    @Severity(SeverityLevel.CRITICAL)
    @Test(dependsOnMethods = "registrationPage")
    public void registrationConfirmationPage() {
        RegistrationConfirmationPage registrationConfirmationPage = new RegistrationConfirmationPage(driver);
        registrationConfirmationPage.goToFlightDetailsPage();
    }

    @Description("Registration Confirmation validation")
    @Epic("EP001")
    @Feature("Feature3: Registration Confirmation validation")
    @Story("Story: Registration Confirmation validation")
    @Step("Verify Registration Confirmation validation is done")
    @Severity(SeverityLevel.NORMAL)
    @Test(dependsOnMethods = "registrationConfirmationPage")
    public void flightDetailsPage() {
        FlightDetailsPage flightDetailsPage = new FlightDetailsPage(driver);
        flightDetailsPage.selectPassengers(noOfPassengers);
        flightDetailsPage.goToFindFlightsPage();
    }

    @Description("FlightDetailsPage")
    @Epic("EP001")
    @Feature("Feature4: FlightDetailsPage validation")
    @Story("Story: FlightDetailsPage validation")
    @Step("Verify FlightDetailsPage")
    @Severity(SeverityLevel.MINOR)
    @Test(dependsOnMethods = "flightDetailsPage")
    public void findFlightPage() {
        FindFlightPage findFlightPage = new FindFlightPage(driver);
        findFlightPage.submitFindFlightPage();
        findFlightPage.goToFlightConfirmationPage();
    }

    @Description("FindFlightPage")
    @Epic("EP001")
    @Feature("Feature5: FindFlightPage validation")
    @Story("Story: FindFlightPage validation")
    @Step("Verify FindFlightPage")
    @Severity(SeverityLevel.TRIVIAL)
    @Test(dependsOnMethods = "findFlightPage")
    public void flightConfirmationPage() {
        FlightConfirmationPage flightConfirmationPage = new FlightConfirmationPage(driver);
        String actualPrice = flightConfirmationPage.getPrice();
        Assert.assertEquals(actualPrice, expectedPrice);
    }

}
